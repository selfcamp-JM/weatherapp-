{"version":3,"sources":["Components/Title.js","Components/Form.js","Components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Title","props","react_default","a","createElement","className","Form","onSubmit","getWeather","type","name","placeholder","Weather","city","country","description","humidity","temperature","error","API_KEY","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_ref","asyncToGenerator","regenerator_default","mark","_callee","e","api_call","data","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","setState","main","temp","sys","weather","undefined","ciy","stop","_x","apply","arguments","state","_this$state","Components_Title","Components_Form","Components_Weather","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8f3ed47e.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nconst Title = props =>(\r\n        <div>\r\n            <h1 className=\"title-container__title\">Weather Finder</h1>\r\n            <h3>Find out temperature,conditions and more...</h3>\r\n        </div>\r\n\r\n)\r\n\r\nexport default Title;\r\n","import React, { Component } from 'react'\r\n\r\nconst Form = props =>(\r\n    <div>\r\n        <form onSubmit = {props.getWeather}>\r\n            <input type=\"text\" name =\"city\" placeholder=\"City...\"/>\r\n            <input type=\"text\" name =\"country\" placeholder=\"Country...\"/>\r\n            <button>Get Weather</button>\r\n\r\n        </form>\r\n      </div>\r\n)\r\n\r\nexport default Form;","import React, { Component } from 'react'\r\n\r\nconst Weather = (props)=>{\r\n\r\n    const{city,country,description,humidity,temperature,error} = props;\r\n   \r\n    return (\r\n        <div className=\"weather__info\">\r\n        {city && country &&\r\n        <div>\r\n            <p className=\"weather__key\"> Location: \r\n\t \t\t  <span className=\"weather__value\"> { city }, { country }</span>\r\n            </p>\r\n            <p className=\"weather__key\"> Temperature: \r\n                <span className=\"weather__value\"> { temperature }\t</span>\r\n            </p> \r\n            <p className=\"weather__key\"> Humidity: \r\n\t \t\t   <span className=\"weather__value\"> { humidity } </span>\r\n\t \t    </p> \r\n            <p className=\"weather__key\"> Conditions: \r\n\t \t\t   <span className=\"weather__value\"> { description } </span>\r\n\t        </p> \r\n\r\n        </div>}\r\n        \r\n        {error &&<p className=\"weather__error\">{ props.error }</p>  }\r\n        \r\n      </div>\r\n\r\n\r\n    )};\r\n\r\nexport default Weather;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Title from \"./Components/Title\";\nimport Form from \"./Components/Form\"\nimport Weather from \"./Components/Weather\"\n\n\n\nconst API_KEY =\"aa82a2e4b40111392a33d56946397148\";\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n  this.state={\n    temperature:undefined,\n    ciy:undefined,\n    country: undefined,\n    description:undefined,\n    humidity:undefined,\n    error: undefined\n    \n  }}\n\n\n  getWeather = async (e)=>{\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\n    const data =await api_call.json();\n\n    \n    if(country && city){\n\n      this.setState({\n        temperature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        error:\"\"\n        \n  \n      });}else{\n        this.setState({\n          temperature:undefined,\n          ciy:undefined,\n          country: undefined,\n          description:undefined,\n          humidity:undefined,\n          error:\"Please enter the city and the country!!!\"\n        });\n\n      }\n    \n  }\n\n  render(){\n    \n    const{temperature,city,country,humidity,description,error} = this.state;\n    \n    return (\n      <div >\n        <div className=\"wrapper\">\n          <div className=\"main\">\n             <div className=\"container\"> \n               <div className=\"row1\">\n                  <div className=\"col-xs-5 title-container\">\n                  <Title />\n                  </div>\n                  <div className=\"col-xs-7 form-container\">\n                  <Form getWeather = {this.getWeather} />\n                  <Weather  \n                    temperature = {temperature}\n                    city = {city}\n                    country = {country}\n                    humidity = {humidity}\n                    description = {description}\n                    error = {error}/>\n                  </div>\n               </div>\n             </div>\n          </div>\n        </div>\n      </div>\n    );\n  }}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport App from './App';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}